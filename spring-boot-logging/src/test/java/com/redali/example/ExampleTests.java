package com.redali.example;

import com.redali.example.controllers.ExampleController;
import nl.altindag.log.LogCaptor;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.springframework.beans.BeansException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.context.ApplicationContext;
import org.springframework.context.ApplicationContextAware;
import org.springframework.test.context.junit.jupiter.SpringExtension;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;
import org.springframework.test.web.servlet.result.MockMvcResultHandlers;
import org.springframework.test.web.servlet.result.MockMvcResultMatchers;

import static org.hamcrest.Matchers.containsString;

// Annotations to enable unit testing REST functions
@SpringBootTest
@AutoConfigureMockMvc
@ExtendWith(SpringExtension.class)
// Example of a class that is notified of the application context when spring-boot starts up
class ExampleTests implements ApplicationContextAware {
    private static final String MY_LOG_MESSAGE = "ExampleTestsRestLogMessage";
    private ApplicationContext applicationContext;

    @Autowired
    private MockMvc mockMvc;

    @Test
    void testLogMessage() throws Exception {
        // Capture any log messages generated by the class being tested
        try (var logCaptor = LogCaptor.forClass(ExampleController.class)) {
            // Execute and check REST invocation
            mockMvc.perform(MockMvcRequestBuilders.get("/log/test?msg=" + MY_LOG_MESSAGE))
                    .andDo(MockMvcResultHandlers.print())
                    .andExpect(MockMvcResultMatchers.status().is(200))
                    .andExpect(MockMvcResultMatchers.content().string(containsString("curl")))
                    .andReturn().getResponse();

            // Verify that we see just the INFO, WARN and ERROR level log messages
            var logs = logCaptor.getLogs();
            Assertions.assertEquals(3, logs.size());
            Assertions.assertEquals("2: " + MY_LOG_MESSAGE, logs.get(0));
            Assertions.assertEquals("3: " + MY_LOG_MESSAGE, logs.get(1));
            Assertions.assertEquals("4: " + MY_LOG_MESSAGE, logs.get(2));
        }
    }

    @Override
    public void setApplicationContext(ApplicationContext applicationContext) throws BeansException {
        this.applicationContext = applicationContext;
    }

    @Test
    void contextLoads() {
        Assertions.assertNotNull(applicationContext);
        Assertions.assertEquals("spring-boot-logging-example", applicationContext.getId());
    }
}
