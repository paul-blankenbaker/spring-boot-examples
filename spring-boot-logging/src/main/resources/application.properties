# There are MANY ways to tweak a spring application, this one sets the application context ID for our unit test
spring.application.name = @project.name@

# Example of bringing in some values defined in the pom.xml file that we can use to configure Swagger with.
app.name=@project.name@
app.description=@project.description@
app.version=@project.version@
app.license.name=@license.name@
app.license.url=@license.url@

# Control whether to enable swagger UI and/or openapi
springdoc.swagger-ui.enabled=true
springdoc.api-docs.enabled=true

# Expose just health, loggers, openapi and swagger-ui under /actuators
# For production, you may not want to include openapi or swagger-ui, tweak production configuration
# to just health,loggers or use -Dmanagement.endpoints.web.exposure.include=health,loggers when starting
management.endpoints.web.exposure.include=health,loggers,openapi,swagger-ui

# For security purposes move actuator access to localhost:8888 and put swagger-ui and openapi under
# actuator control (you can also disable swagger-ui and api-docs above)
management.server.address=localhost
management.server.port=8888
# Moves swagger-ui an openapi endpoints under actuator control
springdoc.use-management-port=true
# Includes actuator endpoints in swagger-ui
springdoc.show-actuator=true

#
# Rest of this file contains some notes on related settings to tweak the default behavior significantly
#

# You can set initial log levels for the root logger, any package or class
# these levels (and any others) can be adjusted on the fly using the /actuator/loggers endpoint
# You can override these defaults by setting system properties on the java invocation like
# -Dlogging.level.com.redali=INFO or via OS environment variables like LOGGING_LEVEL_COM_REDALI=DEBUG
#logging.level.ROOT=ERROR
#logging.level.com.redali=DEBUG
#logging.level.com.redali.example.controllers.ExampleController=TRACE

# To force ANSI color output in logging. However, instead of baking it in as a default, it is probably
# better done via a command line option or SPRING_OUTPUT_ANSI_ENABLED environment variable.
# spring.output.ansi.enabled=always

# Location of custom banner.txt file. You don't have to provide a customer banner.txt, but if you Google
# "spring boot generator", you'll find it's pretty easy to drop one in. If you don't drop it in as
# banner.txt in the top of your resources directory, you can specify an alternative location.
# spring.banner.location=classpath:banner.txt

# To adjust default web address and service port. NOTE: Binding to localhost may cause you headaches
# when running in a container
# server.address=localhost
# server.port=8080

# There are LOTs of /actuator endpoints that can be exposed. The next two lines expose all but two of them.
#management.endpoints.web.exposure.include=*
#management.endpoints.web.exposure.exclude=mappings,shutdown

# Two methods to disable ALL actuator web end points:
#management.server.port=-1
#management.endpoints.web.exposure.exclude=*

# Uncomment if you want to move the actuator endpoints to a different port than the other services
# If you don't specify management.server.address, the actuator endpoint is exposed everywhere.
# However, binding to localhost only will likely cause you issues if running inside a container.
#management.server.address=localhost
#management.server.port=8888
#management.server.ssl.enabled=true
#management.server.ssl.key-store=classpath:management.jks
#management.server.ssl.key-password=secret

# Uncomment if you want to change where the actuator endpoints are anchored
#management.endpoints.web.base-path=/control

# Uncomment to rename an actuator REST endpoint. For example, move /actuator/loggers to /actuator/log
#management.endpoints.web.path-mapping.loggers=log
